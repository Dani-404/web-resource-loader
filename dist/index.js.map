{"version":3,"sources":["../src/index.ts","../src/Resource/Resource.ts","../src/Resource/Image/ImageResource.ts","../src/Resource/Video/VideoResource.ts","../src/Resource/Font/FontResource.ts","../src/Resource/Audio/AudioResource.ts","../src/Resource/ResourceList.ts","../src/Resource/ResourceManager.ts"],"sourcesContent":["import ResourceManager from \"./Resource/ResourceManager\";\r\nimport { ResourceType } from \"./Resource/Types/ResourceType\";\r\nimport { ResourceList } from \"./Resource/ResourceList\";\r\n\r\nexport default ResourceManager\r\nexport { ResourceList }\r\nexport type { ResourceType }","export class Resource {\r\n    key: string;\r\n    data: HTMLImageElement | HTMLAudioElement | HTMLVideoElement | FontFace;\r\n\r\n    constructor(key: string, data: HTMLImageElement | HTMLAudioElement | HTMLVideoElement | FontFace) {\r\n        this.key = key;\r\n        this.data = data;\r\n    }\r\n\r\n    public getData(): HTMLImageElement | HTMLAudioElement | HTMLVideoElement | FontFace {\r\n        return this.data;\r\n    }\r\n}","import { Resource } from \"../Resource\";\r\n\r\nexport class ImageResource extends Resource {\r\n    constructor({ key, data }: { key: string; data: HTMLImageElement }) {\r\n        super(key, data)\r\n    }\r\n}","import { Resource } from \"../Resource\";\r\n\r\nexport class VideoResource extends Resource {\r\n    constructor({ key, data }: { key: string; data: HTMLVideoElement }) {\r\n        super(key, data);\r\n    }\r\n}","import { Resource } from \"../Resource\";\r\n\r\nexport class FontResource extends Resource {\r\n    constructor({ key, data }: { key: string; data: FontFace }) {\r\n        super(key, data)\r\n    }\r\n}","import { Resource } from \"../Resource\";\r\n\r\nexport class AudioResource extends Resource {\r\n    constructor({ key, data }: { key: string; data: HTMLAudioElement }) {\r\n        super(key, data)\r\n    }\r\n}","export enum ResourceList {\r\n    IMAGE,\r\n    VIDEO,\r\n    FONT,\r\n    AUDIO\r\n}","import { ImageResource } from \"./Image/ImageResource\";\r\nimport { VideoResource } from \"./Video/VideoResource\";\r\nimport { FontResource } from \"./Font/FontResource\";\r\nimport { AudioResource } from \"./Audio/AudioResource\";\r\nimport { ResourceList } from \"./ResourceList\";\r\nimport { ResourceType } from \"./Types/ResourceType\";\r\n\r\nexport default class ResourceManager extends EventTarget {\r\n    images: ImageResource[];\r\n    videos: VideoResource[];\r\n    fonts: FontResource[];\r\n    audios: AudioResource[];\r\n    totalResources: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.images = [];\r\n        this.videos = [];\r\n        this.fonts = [];\r\n        this.audios = [];\r\n        this.totalResources = 0;\r\n    }\r\n\r\n    public loadResources({ images = [], videos = [], fonts = [], audios = [] }: { images?: ResourceType[]; videos?: ResourceType[]; fonts?: ResourceType[]; audios?: ResourceType[] }): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            this.totalResources = images.length + videos.length + fonts.length + audios.length;\r\n\r\n            const listOfPromise = [];\r\n\r\n            for (let i in images) {\r\n                const { key, src } = images[i];\r\n\r\n                const countItems = images.filter((image) => image.key.toUpperCase() == key.toUpperCase());\r\n                if(countItems.length > 1)\r\n                    console.warn(`[WARNING] Duplicate image key ${key}`)\r\n\r\n                listOfPromise.push(this.loadResource({\r\n                    type: ResourceList.IMAGE,\r\n                    key,\r\n                    src\r\n                }));\r\n            }\r\n\r\n            for (let i in videos) {\r\n                const { key, src } = videos[i];\r\n\r\n                const countItems = videos.filter((video) => video.key.toUpperCase() == key.toUpperCase());\r\n                if(countItems.length > 1)\r\n                    console.warn(`[WARNING] Duplicate video key ${key}`)\r\n\r\n                listOfPromise.push(this.loadResource({\r\n                    type: ResourceList.VIDEO,\r\n                    key,\r\n                    src\r\n                }));\r\n            }\r\n\r\n            for (let i in fonts) {\r\n                const { key, src } = fonts[i];\r\n\r\n                const countItems = fonts.filter((font) => font.key.toUpperCase() == key.toUpperCase());\r\n                if(countItems.length > 1)\r\n                    console.warn(`[WARNING] Duplicate font key ${key}`)\r\n\r\n                listOfPromise.push(this.loadResource({\r\n                    type: ResourceList.FONT,\r\n                    key,\r\n                    src\r\n                }));\r\n            }\r\n\r\n            for (let i in audios) {\r\n                const { key, src } = audios[i];\r\n\r\n                const countItems = audios.filter((audio) => audio.key.toUpperCase() == key.toUpperCase());\r\n                if(countItems.length > 1)\r\n                    console.warn(`[WARNING] Duplicate audio key ${key}`)\r\n\r\n                listOfPromise.push(this.loadResource({\r\n                    type: ResourceList.AUDIO,\r\n                    key,\r\n                    src\r\n                }));\r\n            }\r\n\r\n            this.dispatchEvent(new CustomEvent(\"start\"));\r\n            Promise.all(listOfPromise)\r\n                .then(() => resolve(`[ResourceManager] All resources have been loaded (${images.length} images, ${videos.length} videos, ${fonts.length} fonts, ${audios.length} audios).`))\r\n                .catch((e) => reject(`[ResourceManager ERROR] ${e}`));\r\n        });\r\n    }\r\n\r\n    private loadResource({ type, key, src }: { type: ResourceList; key: string; src: string }): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const instance = this;\r\n\r\n            switch (type) {\r\n                case ResourceList.IMAGE: {\r\n                    const image = new Image();\r\n\r\n                    image.onload = function () {\r\n                        const imageResource = new ImageResource({\r\n                            key: key.toUpperCase(),\r\n                            data: image\r\n                        });\r\n                        instance.images.push(imageResource);\r\n                        instance.emitProgress();\r\n\r\n                        resolve(`Image ${key} loaded.`)\r\n                    };\r\n\r\n                    image.onerror = function () {\r\n                        reject(`Impossible to load image ${key} (${src}).`)\r\n                    };\r\n\r\n                    image.src = src;\r\n                    break;\r\n                }\r\n\r\n                case ResourceList.VIDEO: {\r\n                    const video = document.createElement(\"video\") as HTMLVideoElement;\r\n\r\n                    video.onloadeddata = function () {\r\n                        const videoResource = new VideoResource({\r\n                            key: key.toUpperCase(),\r\n                            data: video\r\n                        });\r\n                        instance.videos.push(videoResource);\r\n                        instance.emitProgress();\r\n\r\n                        resolve(`Video ${key} loaded.`)\r\n                    };\r\n\r\n                    video.onerror = function () {\r\n                        reject(`Impossible to load video ${key} (${src}).`)\r\n                    };\r\n\r\n                    video.src = src;\r\n                    video.load();\r\n                    break;\r\n                }\r\n\r\n                case ResourceList.FONT: {\r\n                    const fontFile = new FontFace(\r\n                        key,\r\n                        `url(${src})`,\r\n                    );\r\n                    document.fonts.add(fontFile);\r\n\r\n                    fontFile.load().then(() => {\r\n                        const fontResource = new FontResource({\r\n                            key: key.toUpperCase(),\r\n                            data: fontFile\r\n                        });\r\n                        instance.fonts.push(fontResource);\r\n                        instance.emitProgress();\r\n\r\n                        resolve(`Font ${key} loaded.`)\r\n                    }).catch((e) => reject(`Impossible to load font ${key} (${src}).`))\r\n                    break;\r\n                }\r\n\r\n                case ResourceList.AUDIO: {\r\n                    const audio = new Audio(src);\r\n\r\n                    audio.onloadeddata = function () {\r\n                        const audioResource = new AudioResource({\r\n                            key: key.toUpperCase(),\r\n                            data: audio\r\n                        });\r\n                        instance.audios.push(audioResource);\r\n                        instance.emitProgress();\r\n\r\n                        resolve(`Audio ${key} loaded.`)\r\n                    };\r\n\r\n                    audio.onerror = function () {\r\n                        reject(`Impossible to load audio ${key} (${src}).`)\r\n                    };\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private countTotalResources(): number {\r\n        return this.images.length + this.videos.length + this.fonts.length + this.audios.length\r\n    }\r\n\r\n    private emitProgress(): void {\r\n        const loadedResources = this.countTotalResources();\r\n\r\n        this.dispatchEvent(new CustomEvent(\"progress\", {\r\n            detail: {\r\n                totalResources: this.totalResources,\r\n                loadedResources: loadedResources,\r\n                percentage: (loadedResources / this.totalResources) * 100\r\n            }\r\n        }));\r\n    }\r\n\r\n    public getImage(key: string): ImageResource | null {\r\n        for (let i in this.images) {\r\n            const image = this.images[i];\r\n            if (image.key == key.toUpperCase())\r\n                return image;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getVideo(key: string): VideoResource | null {\r\n        for (let i in this.videos) {\r\n            const video = this.videos[i];\r\n            if (video.key == key.toUpperCase())\r\n                return video;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getFont(key: string): FontResource | null {\r\n        for (let i in this.fonts) {\r\n            const font = this.fonts[i];\r\n            if (font.key == key.toUpperCase())\r\n                return font;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getAudio(key: string): AudioResource | null {\r\n        for (let i in this.audios) {\r\n            const audio = this.audios[i];\r\n            if (audio.key == key.toUpperCase())\r\n                return audio;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}"],"mappings":"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","names":["ResourceList"]}